/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package Compiler;

import org.apache.commons.io.IOUtils;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;

import java.io.*;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.Collection;

import static org.junit.Assert.*;

@RunWith(Parameterized.class)
public class LLVMTest {

    private int TestNumber;
    private String testClass;
    private MXCC mxcc;

    @Before
    public void initialize() {
        this.mxcc = new MXCC();
    }

    public LLVMTest(String testClass, int testNumber) {
        this.testClass = testClass;
        this.TestNumber = testNumber;
    }

    static public int PrepareTestFile(String path) throws IOException {
        InputStream is = new FileInputStream(path);

        String text = IOUtils.toString(is, StandardCharsets.UTF_8);

        String meta = text.substring(text.indexOf("/*"), text.indexOf("*/"));
        int start = meta.lastIndexOf("=== input ===");
        int end = meta.indexOf("=== end ===");
        assertNotEquals(start, -1);
        assertNotEquals(end, -1);
        String input = meta.substring(start + "=== input ===".length() + 1, end);
        BufferedWriter bufw1 = new BufferedWriter(new FileWriter("/tmp/test.in"));
        bufw1.write(input);
        bufw1.flush();

        start = meta.lastIndexOf("=== output ===");
        end = meta.lastIndexOf("=== end ===");
        assertNotEquals(start, -1);
        assertNotEquals(end, -1);
        String output = meta.substring(start + "=== output ===".length() + 1, end);
        BufferedWriter bufw2 = new BufferedWriter(new FileWriter("/tmp/test.out"));
        bufw2.write(output);
        bufw2.flush();

        start = meta.indexOf("ExitCode:") + "ExitCode:".length() + 1;
        end = meta.indexOf("InstLimit:") - 1;
        String exit = meta.substring(start, end);
        return Integer.parseInt(exit);
    }

    public int RunTestFile(String name) throws IOException, InterruptedException {
        String rootDir = "/home/yujie6/Documents/Compiler/MX-Compiler/src/test/resources/";
        String fileName = "codegen/" + name;
        System.out.println("Ready to compile \'" + name + "\'");
        int exitCode = PrepareTestFile(rootDir + fileName);
        mxcc.compile(rootDir + fileName);
        ProcessBuilder builder = new ProcessBuilder();
        builder.directory(new File(rootDir));
        builder.command("bash", "test.sh");
        Process process = builder.start();
        return process.waitFor();
    }

    @Parameterized.Parameters
    public static Collection testNames() {
        ArrayList<Object> t = new ArrayList<>();
        for (int i = 1; i <= 10; i++) {
            t.add(new Object[] {"e", i} );
        }
        for (int i = 1; i <= 68; i++) {
            if (i != 65)
                t.add(new Object[] {"t", i});
        }
        return t;
    }


    @Test(timeout=1000)
    public void testCodegen() throws IOException, InterruptedException {
        int diffResult = RunTestFile(this.testClass + this.TestNumber + ".mx");
        assertEquals(diffResult, 0);
    }

}
